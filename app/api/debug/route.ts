import { NextRequest, NextResponse } from 'next/server'
import PocketBase from 'pocketbase'

// ÊµãËØï‰∏çÂêåÁöÑPocketBase URL
const POCKETBASE_URLS = [
  'http://pjpc.tplinkdns.com:8090',  // ‰∏ªË¶ÅÊúçÂä°Âô®
  'http://pjpc.tplinkdns.com:8090',        // Êú¨Âú∞ÁΩëÁªú
  'http://localhost:8090'             // Êú¨Âú∞ÂºÄÂèë
]

export async function GET() {
  const results = []
  
  for (const url of POCKETBASE_URLS) {
    try {
      console.log(`üîç ÊµãËØïPocketBaseËøûÊé•: ${url}`)
      const pb = new PocketBase(url)
      
      // ÂÖàËøõË°åÁÆ°ÁêÜÂëòËÆ§ËØÅ
      await pb.admins.authWithPassword('pjpcemerlang@gmail.com', '0122270775Sw!')
      console.log(`‚úÖ ${url} ÁÆ°ÁêÜÂëòËÆ§ËØÅÊàêÂäü`)
      
      // ÊµãËØïËøûÊé•
      const collections = await pb.collections.getFullList()
      console.log(`‚úÖ ${url} ËøûÊé•ÊàêÂäüÔºåÊâæÂà∞ ${collections.length} ‰∏™ÈõÜÂêà`)
      
      // Ê£ÄÊü•studentsÈõÜÂêà
      const students = await pb.collection('students').getList(1, 5)
      console.log(`üìä ${url} studentsÈõÜÂêàÊúâ ${students.items.length} Êù°ËÆ∞ÂΩï`)
      
      // ÁâπÂà´Ê£ÄÊü•ÁßØÂàÜÁõ∏ÂÖ≥ÈõÜÂêà
      const studentPointsCollection = collections.find(c => c.name === 'student_points')
      const pointTransactionsCollection = collections.find(c => c.name === 'point_transactions')
      
      results.push({
        url,
        status: 'success',
        collections: collections.length,
        students: students.items.length,
        collectionNames: collections.map(c => c.name),
        sampleStudents: students.items.slice(0, 2),
        studentPointsCollection: studentPointsCollection ? {
          name: studentPointsCollection.name,
          id: studentPointsCollection.id,
          schema: studentPointsCollection.schema
        } : null,
        pointTransactionsCollection: pointTransactionsCollection ? {
          name: pointTransactionsCollection.name,
          id: pointTransactionsCollection.id,
          schema: pointTransactionsCollection.schema
        } : null
      })
      
    } catch (error: any) {
      console.error(`‚ùå ${url} ËøûÊé•Â§±Ë¥•:`, error.message)
      results.push({
        url,
        status: 'error',
        error: error.message
      })
    }
  }
  
  return NextResponse.json({
    success: true,
    results,
    timestamp: new Date().toISOString()
  })
}
